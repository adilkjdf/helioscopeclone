import React, { useState, useRef } from 'react';
import { X, UploadCloud, FileUp, Eye, Save, Trash2 } from 'lucide-react';
import { Module, PanFile } from '../../types/project';
import { parsePanFile } from '../../utils/panParser';
import ModulePreviewModal from './ModulePreviewModal';

interface ModuleUploadModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (moduleData: Module) => void;
}

interface UploadableFile {
  file: File;
  id: string;
}

const ModuleUploadModal: React.FC<ModuleUploadModalProps> = ({ isOpen, onClose, onSave }) => {
  const [files, setFiles] = useState<UploadableFile[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);
  const [fileToPreview, setFileToPreview] = useState<{ panFile: PanFile, fileName: string } | null>(null);

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = event.target.files;
    if (selectedFiles) {
      const newFiles: UploadableFile[] = Array.from(selectedFiles).map(file => ({
        file,
        id: `${file.name}-${file.lastModified}`,
      }));
      setFiles(prev => [...prev, ...newFiles]);
    }
  };

  const triggerFileSelect = () => fileInputRef.current?.click();
  const removeFile = (id: string) => setFiles(files.filter(f => f.id !== id));

  const handlePreview = (file: File) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      const parsedData = parsePanFile(content);
      setFileToPreview({ panFile: parsedData, fileName: file.name });
      setIsPreviewOpen(true);
    };
    reader.readAsText(file);
  };

  const handleSave = (file: File) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      const panFile = parsePanFile(content);
      const moduleData: Module = {
        id: '', // Will be generated by Supabase
        created_at: new Date().toISOString(),
        model_name: panFile.Model as string,
        manufacturer: panFile.Manufacturer as string,
        technology: panFile.Technol as string,
        max_power_pmp: panFile.PNom as number,
        width: panFile.Width as number,
        height: panFile.Height as number,
        voc: panFile.Voc as number,
        isc: panFile.Isc as number,
        vmp: panFile.Vmp as number,
        imp: panFile.Imp as number,
        raw_pan_data: panFile,
        n_cells_in_series: panFile.NCelS as number,
        n_cells_in_parallel: panFile.NCelP as number,
        n_diodes: panFile.NDiode as number,
        p_nom_tol_low: panFile.PNomTolLow as number,
        p_nom_tol_up: panFile.PNomTolUp as number,
        mu_isc: panFile.mu_Isc as number,
        mu_voc_spec: panFile.muVocSpec as number,
        mu_pmp_req: panFile.muPmpReq as number,
        gamma_ref: panFile.gamma_ref as number,
        mu_gamma: panFile.mu_gamma as number,
        r_s: panFile.R_s as number,
        r_sh_ref: panFile.R_sh_ref as number,
        r_sh_0: panFile.R_sh_0 as number,
        r_sh_exp: panFile.R_sh_exp as number,
        i_l_ref: panFile.I_L_ref as number,
        i_o_ref: panFile.I_o_ref as number,
        data_source: panFile.DataSource as string,
      };
      onSave(moduleData);
      removeFile(`${file.name}-${file.lastModified}`);
    };
    reader.readAsText(file);
  };

  if (!isOpen) return null;

  return (
    <>
      <div className="fixed inset-0 z-50 overflow-y-auto bg-black bg-opacity-50 flex items-center justify-center p-4">
        <div className="relative bg-white rounded-lg shadow-xl w-full max-w-4xl">
          <div className="flex items-center justify-between p-4 border-b bg-gray-100 rounded-t-lg">
            <h2 className="text-xl font-semibold text-gray-800 flex items-center">
              <UploadCloud className="w-6 h-6 mr-3 text-gray-600" />
              Module Upload
            </h2>
            <button onClick={onClose} className="p-2 hover:bg-gray-200 rounded-full transition-colors">
              <X className="w-5 h-5 text-gray-500" />
            </button>
          </div>

          <div className="p-6 space-y-4">
            <p className="text-sm text-gray-600">
              Select any .PAN files you have to add them to HelioScope. When we upload a PAN file we store it as a Module Characterization.
            </p>
            
            <div className="flex space-x-3 pt-2">
              <button
                onClick={triggerFileSelect}
                className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors flex items-center space-x-2"
              >
                <FileUp className="w-4 h-4" />
                <span>Select Files</span>
              </button>
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileSelect}
                className="hidden"
                accept=".pan"
                multiple
              />
            </div>

            <div className="border rounded-lg overflow-hidden mt-4">
              <table className="w-full text-sm">
                <thead className="bg-gray-50 text-left">
                  <tr>
                    <th className="p-3 font-medium text-gray-600">File</th>
                    <th className="p-3 font-medium text-gray-600">Size</th>
                    <th className="p-3 font-medium text-gray-600">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {files.length === 0 ? (
                    <tr>
                      <td colSpan={3} className="text-center p-8 text-gray-500">
                        No files selected.
                      </td>
                    </tr>
                  ) : (
                    files.map(item => (
                      <tr key={item.id} className="border-t">
                        <td className="p-3 align-middle font-medium text-gray-800">{item.file.name}</td>
                        <td className="p-3 align-middle text-gray-600">{(item.file.size / 1024).toFixed(2)} KB</td>
                        <td className="p-3 align-middle">
                          <div className="flex items-center space-x-2">
                            <button 
                              onClick={() => handleSave(item.file)}
                              className="bg-orange-500 text-white px-3 py-1 rounded-md text-xs flex items-center space-x-1 hover:bg-orange-600"
                            >
                              <Save size={14} />
                              <span>Save</span>
                            </button>
                            <button 
                              onClick={() => handlePreview(item.file)}
                              className="bg-cyan-500 text-white px-3 py-1 rounded-md text-xs flex items-center space-x-1 hover:bg-cyan-600"
                            >
                              <Eye size={14} />
                              <span>Preview</span>
                            </button>
                            <button 
                              onClick={() => removeFile(item.id)}
                              className="bg-gray-200 text-gray-600 px-2 py-1 rounded-md hover:bg-gray-300"
                            >
                              <Trash2 size={14} />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      {isPreviewOpen && fileToPreview && (
        <ModulePreviewModal
          isOpen={isPreviewOpen}
          onClose={() => setIsPreviewOpen(false)}
          panFile={fileToPreview.panFile}
          fileName={fileToPreview.fileName}
        />
      )}
    </>
  );
};

export default ModuleUploadModal;